// Code generated by "gen-int -t uint8 -o convert/uint8.go"; DO NOT EDIT.
package convert

import (
	"errors"
	"strconv"
)

func ToUint8(v interface{}) (uint8, error) {
	if v == nil {
		return 0, ErrNil
	}
	switch vt := v.(type) {

	case int8:
		if vt < 0 {
			return 0, &RangeError{"int8", "uint8", vt}
		}
		return uint8(vt), nil
	case *int8:
		if vt == nil {
			return 0, ErrNil
		}
		if *vt < 0 {
			return 0, &RangeError{"*int8", "uint8", *vt}
		}
		return uint8(*vt), nil

	case int16:
		if vt < 0 || int16(maxUint8) < vt {
			return 0, &RangeError{"int16", "uint8", vt}
		}
		return uint8(vt), nil
	case *int16:
		if vt == nil {
			return 0, ErrNil
		}
		if *vt < 0 || int16(maxUint8) < *vt {
			return 0, &RangeError{"*int16", "uint8", *vt}
		}
		return uint8(*vt), nil

	case int32:
		if vt < 0 || int32(maxUint8) < vt {
			return 0, &RangeError{"int32", "uint8", vt}
		}
		return uint8(vt), nil
	case *int32:
		if vt == nil {
			return 0, ErrNil
		}
		if *vt < 0 || int32(maxUint8) < *vt {
			return 0, &RangeError{"*int32", "uint8", *vt}
		}
		return uint8(*vt), nil

	case int64:
		if vt < 0 || int64(maxUint8) < vt {
			return 0, &RangeError{"int64", "uint8", vt}
		}
		return uint8(vt), nil
	case *int64:
		if vt == nil {
			return 0, ErrNil
		}
		if *vt < 0 || int64(maxUint8) < *vt {
			return 0, &RangeError{"*int64", "uint8", *vt}
		}
		return uint8(*vt), nil

	case int:
		if vt < 0 || int(maxUint8) < vt {
			return 0, &RangeError{"int", "uint8", vt}
		}
		return uint8(vt), nil
	case *int:
		if vt == nil {
			return 0, ErrNil
		}
		if *vt < 0 || int(maxUint8) < *vt {
			return 0, &RangeError{"*int", "uint8", *vt}
		}
		return uint8(*vt), nil

	case uint8:
		return vt, nil
	case *uint8:
		if vt == nil {
			return 0, ErrNil
		}
		return *vt, nil

	case uint16:
		if uint16(maxUint8) < vt {
			return 0, &RangeError{"uint16", "uint8", vt}
		}
		return uint8(vt), nil
	case *uint16:
		if vt == nil {
			return 0, ErrNil
		}
		if uint16(maxUint8) < *vt {
			return 0, &RangeError{"*uint16", "uint8", *vt}
		}
		return uint8(*vt), nil

	case uint32:
		if uint32(maxUint8) < vt {
			return 0, &RangeError{"uint32", "uint8", vt}
		}
		return uint8(vt), nil
	case *uint32:
		if vt == nil {
			return 0, ErrNil
		}
		if uint32(maxUint8) < *vt {
			return 0, &RangeError{"*uint32", "uint8", *vt}
		}
		return uint8(*vt), nil

	case uint64:
		if uint64(maxUint8) < vt {
			return 0, &RangeError{"uint64", "uint8", vt}
		}
		return uint8(vt), nil
	case *uint64:
		if vt == nil {
			return 0, ErrNil
		}
		if uint64(maxUint8) < *vt {
			return 0, &RangeError{"*uint64", "uint8", *vt}
		}
		return uint8(*vt), nil

	case uint:
		if uint(maxUint8) < vt {
			return 0, &RangeError{"uint", "uint8", vt}
		}
		return uint8(vt), nil
	case *uint:
		if vt == nil {
			return 0, ErrNil
		}
		if uint(maxUint8) < *vt {
			return 0, &RangeError{"*uint", "uint8", *vt}
		}
		return uint8(*vt), nil

	case string:
		n, err := strconv.ParseUint(vt, 10, 8)
		if err != nil {
			if errors.Is(err, strconv.ErrRange) {
				err = &RangeError{"string", "uint8", vt}
			}
			return 0, err
		}
		r, err := ToUint8(n)
		if err, ok := err.(*RangeError); ok && err != nil {
			err.from = "string"
		}
		return r, err
	case *string:
		if vt == nil {
			return 0, ErrNil
		}
		n, err := strconv.ParseUint(*vt, 10, 8)
		if err != nil {
			if errors.Is(err, strconv.ErrRange) {
				err = &RangeError{"*string", "uint8", *vt}
			}
			return 0, err
		}
		r, err := ToUint8(n)
		if err, ok := err.(*RangeError); ok && err != nil {
			err.from = "*string"
		}
		return r, err

	}
	return 0, ErrNoNumConvert
}

func ToUint8P(v interface{}) (*uint8, error) {
	if v == nil {
		return nil, nil
	}
	switch vt := v.(type) {

	case int8:
		if vt < 0 {
			return nil, &RangeError{"int8", "uint8", vt}
		}
		casted := uint8(vt)
		return &casted, nil
	case *int8:
		if vt == nil {
			return nil, nil
		}
		if *vt < 0 {
			return nil, &RangeError{"*int8", "uint8", *vt}
		}
		casted := uint8(*vt)
		return &casted, nil

	case int16:
		if vt < 0 || int16(maxUint8) < vt {
			return nil, &RangeError{"int16", "uint8", vt}
		}
		casted := uint8(vt)
		return &casted, nil
	case *int16:
		if vt == nil {
			return nil, nil
		}
		if *vt < 0 || int16(maxUint8) < *vt {
			return nil, &RangeError{"*int16", "uint8", *vt}
		}
		casted := uint8(*vt)
		return &casted, nil

	case int32:
		if vt < 0 || int32(maxUint8) < vt {
			return nil, &RangeError{"int32", "uint8", vt}
		}
		casted := uint8(vt)
		return &casted, nil
	case *int32:
		if vt == nil {
			return nil, nil
		}
		if *vt < 0 || int32(maxUint8) < *vt {
			return nil, &RangeError{"*int32", "uint8", *vt}
		}
		casted := uint8(*vt)
		return &casted, nil

	case int64:
		if vt < 0 || int64(maxUint8) < vt {
			return nil, &RangeError{"int64", "uint8", vt}
		}
		casted := uint8(vt)
		return &casted, nil
	case *int64:
		if vt == nil {
			return nil, nil
		}
		if *vt < 0 || int64(maxUint8) < *vt {
			return nil, &RangeError{"*int64", "uint8", *vt}
		}
		casted := uint8(*vt)
		return &casted, nil

	case int:
		if vt < 0 || int(maxUint8) < vt {
			return nil, &RangeError{"int", "uint8", vt}
		}
		casted := uint8(vt)
		return &casted, nil
	case *int:
		if vt == nil {
			return nil, nil
		}
		if *vt < 0 || int(maxUint8) < *vt {
			return nil, &RangeError{"*int", "uint8", *vt}
		}
		casted := uint8(*vt)
		return &casted, nil

	case uint8:
		return &vt, nil
	case *uint8:
		return vt, nil

	case uint16:
		if uint16(maxUint8) < vt {
			return nil, &RangeError{"uint16", "uint8", vt}
		}
		casted := uint8(vt)
		return &casted, nil
	case *uint16:
		if vt == nil {
			return nil, nil
		}
		if uint16(maxUint8) < *vt {
			return nil, &RangeError{"*uint16", "uint8", *vt}
		}
		casted := uint8(*vt)
		return &casted, nil

	case uint32:
		if uint32(maxUint8) < vt {
			return nil, &RangeError{"uint32", "uint8", vt}
		}
		casted := uint8(vt)
		return &casted, nil
	case *uint32:
		if vt == nil {
			return nil, nil
		}
		if uint32(maxUint8) < *vt {
			return nil, &RangeError{"*uint32", "uint8", *vt}
		}
		casted := uint8(*vt)
		return &casted, nil

	case uint64:
		if uint64(maxUint8) < vt {
			return nil, &RangeError{"uint64", "uint8", vt}
		}
		casted := uint8(vt)
		return &casted, nil
	case *uint64:
		if vt == nil {
			return nil, nil
		}
		if uint64(maxUint8) < *vt {
			return nil, &RangeError{"*uint64", "uint8", *vt}
		}
		casted := uint8(*vt)
		return &casted, nil

	case uint:
		if uint(maxUint8) < vt {
			return nil, &RangeError{"uint", "uint8", vt}
		}
		casted := uint8(vt)
		return &casted, nil
	case *uint:
		if vt == nil {
			return nil, nil
		}
		if uint(maxUint8) < *vt {
			return nil, &RangeError{"*uint", "uint8", *vt}
		}
		casted := uint8(*vt)
		return &casted, nil

	case string:
		n, err := strconv.ParseUint(vt, 10, 8)
		if err != nil {
			if errors.Is(err, strconv.ErrRange) {
				err = &RangeError{"string", "*uint8", vt}
			}
			return nil, err
		}
		r, err := ToUint8P(n)
		if err, ok := err.(*RangeError); ok && err != nil {
			err.from = "string"
		}
		return r, err
	case *string:
		if vt == nil {
			return nil, nil
		}
		n, err := strconv.ParseUint(*vt, 10, 8)
		if err != nil {
			if errors.Is(err, strconv.ErrRange) {
				err = &RangeError{"*string", "*uint8", *vt}
			}
			return nil, err
		}
		r, err := ToUint8P(n)
		if err, ok := err.(*RangeError); ok && err != nil {
			err.from = "*string"
		}
		return r, err

	}
	return nil, ErrNoNumConvert
}
